{"title":"渗透测试笔记 - day37 逻辑漏洞","date":"2023-03-16T17:42:18.137Z","date_formatted":{"ll":"Mar 16, 2023","L":"03/16/2023","MM-DD":"03-16"},"link":"2023/03/16/渗透测试笔记 - day37 逻辑漏洞","updated":"2023-03-17T05:00:04.407Z","content":"<h2 id=\"暴力破解\">暴力破解<a title=\"#暴力破解\" href=\"#暴力破解\"></a></h2>\n<p><strong>Pikachu-labs 基于表单的暴力破解</strong></p>\n<p>随便填写并抓包</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149760.png\" alt=\"image-20220322184821999\" loading=\"lazy\" class=\"φbp\"></p>\n<p>发送到intruder模块并抓包</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149094.png\" alt=\"image-20220322191433841\" loading=\"lazy\" class=\"φbp\"></p>\n<p>设置字典</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149201.png\" alt=\"image-20220322185313796\" loading=\"lazy\" class=\"φbp\"></p>\n<p>攻击</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149512.png\" alt=\"image-20220322191446057\" loading=\"lazy\" class=\"φbp\"></p>\n<p>筛选返回结果</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149397.png\" alt=\"image-20220322191507540\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149480.png\" alt=\"image-20220322191529900\" loading=\"lazy\" class=\"φbp\"></p>\n<p>爆破成功。</p>\n<h2 id=\"验证码绕过\">验证码绕过<a title=\"#验证码绕过\" href=\"#验证码绕过\"></a></h2>\n<ul>\n<li>验证码不过期，没有及时销毁会话导致同一验证码反复可用。攻击者可以在Cookie中带固定的sessionID和固定的验证码字符串。</li>\n<li>没有对验证码进行非空判断，导致可以直接删除验证码参数。</li>\n<li>产生的验证码问题有限</li>\n</ul>\n<p><strong>Pikachu-labs 服务端验证码绕过</strong></p>\n<p>抓包</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149614.png\" alt=\"image-20220322231215168\" loading=\"lazy\" class=\"φbp\"></p>\n<p>使用intruder模块重复使用验证码抓包</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149345.png\" alt=\"image-20220322231551152\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149186.png\" alt=\"image-20220322231600553\" loading=\"lazy\" class=\"φbp\"></p>\n<p>验证结果</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149821.png\" alt=\"image-20220322231621006\" loading=\"lazy\" class=\"φbp\"></p>\n<p>回显均相同，验证码可重复使用。</p>\n<p><strong>Pikachu-labs 客户端验证码绕过</strong></p>\n<p>f12查看js代码，检查验证码元素</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149876.png\" alt=\"image-20220322231949508\" loading=\"lazy\" class=\"φbp\"></p>\n<p>发现有验证码生成功能的js函数createCode，直接搜索函数定义</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149817.png\" alt=\"image-20220322232100213\" loading=\"lazy\" class=\"φbp\"></p>\n<p>直接利用工具禁用js</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149743.png\" alt=\"image-20220322231727479\" loading=\"lazy\" class=\"φbp\"></p>\n<p>完成。</p>\n<h2 id=\"token防爆破绕过\">Token防爆破绕过<a title=\"#token防爆破绕过\" href=\"#token防爆破绕过\"></a></h2>\n<p><strong>Pikachu-labs Token防爆破</strong></p>\n<p>服务端生成的Token可用于下次登陆的Token验证，因此，在爆破时只需提取上次爆破时返回的Token即可。</p>\n<p>实验流程：</p>\n<p>登录抓包</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149454.png\" alt=\"image-20220322233353630\" loading=\"lazy\" class=\"φbp\"></p>\n<p>使用intruder模块设置payload为username、password和token</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149506.png\" alt=\"image-20220322233522722\" loading=\"lazy\" class=\"φbp\"></p>\n<p>导入用户名和密码字典</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149312.png\" alt=\"image-20220322233723108\" loading=\"lazy\" class=\"φbp\"></p>\n<p>payload3选择Recusive grep递归匹配并设置匹配字符</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149944.png\" alt=\"image-20220322234228276\" loading=\"lazy\" class=\"φbp\"></p>\n<p>由于无法多线程，每个token只能用一次。因此设置线程为1</p>\n<p>开始攻击</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149850.png\" alt=\"image-20220322234446115\" loading=\"lazy\" class=\"φbp\"></p>\n<p>筛选结果即可。</p>\n<h2 id=\"越权\">越权<a title=\"#越权\" href=\"#越权\"></a></h2>\n<p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为越权操作。</p>\n<p>越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的。</p>\n<p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。</p>\n<h3 id=\"水平越权\">水平越权<a title=\"#水平越权\" href=\"#水平越权\"></a></h3>\n<p><strong>Pikachu-labs 水平越权</strong></p>\n<p>登录个人账户</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149028.png\" alt=\"image-20220322234810855\" loading=\"lazy\" class=\"φbp\"></p>\n<p>修改username的值为他人账户</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149031.png\" alt=\"image-20220322234913534\" loading=\"lazy\" class=\"φbp\"></p>\n<p>完成。</p>\n<h3 id=\"垂直越权\">垂直越权<a title=\"#垂直越权\" href=\"#垂直越权\"></a></h3>\n<p><strong>Pikachu-labs 垂直越权</strong></p>\n<p>登录普通用户</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112149978.png\" alt=\"image-20220322235007935\" loading=\"lazy\" class=\"φbp\"></p>\n<p>访问管理员用户编辑页面</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112150226.png\" alt=\"image-20220322235421519\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以越权。</p>\n","prev":{"title":"渗透测试笔记 - day36 反序列化","link":"2023/03/16/渗透测试笔记 - day36 反序列化"},"next":{"title":"渗透测试笔记 - day35 SSRF","link":"2023/03/16/渗透测试笔记 - day35 SSRF"},"plink":"https://Lq0ne.github.io/2023/03/16/渗透测试笔记 - day37 逻辑漏洞/","toc":[{"id":"暴力破解","title":"暴力破解","index":"1"},{"id":"验证码绕过","title":"验证码绕过","index":"2"},{"id":"token防爆破绕过","title":"Token防爆破绕过","index":"3"},{"id":"越权","title":"越权","index":"4","children":[{"id":"水平越权","title":"水平越权","index":"4.1"},{"id":"垂直越权","title":"垂直越权","index":"4.2"}]}],"copyright":{"license":"个人原创 - 自由转载 - 保持署名 - 禁止商用","published":"March 16, 2023","author":"Lq0ne","link":"<a href=\"https://Lq0ne.github.io/2023/03/16/渗透测试笔记 - day37 逻辑漏洞/\" title=\"渗透测试笔记 - day37 逻辑漏洞\">https://Lq0ne.github.io/2023/03/16/渗透测试笔记 - day37 逻辑漏洞/</a>"},"reading_time":"845 words in 6 min"}